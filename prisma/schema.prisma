generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model roles {
  id            Int                @id @default(autoincrement())
  role_name     String             @unique
  active_status Boolean            @default(true)
  users         user[]
  role_maps     role_modules_map[]
}

model user {
  id            Int     @id @default(autoincrement())
  f_name        String  @db.VarChar(200)
  l_name        String  @db.VarChar(200)
  username      String? @db.VarChar(200)
  contact       String? @db.VarChar(16)
  email         String  @unique
  password      String  @db.VarChar(50)
  org_email     String? @db.VarChar(100)
  address       String? @db.Text
  active_status Boolean @default(true)
  role          roles   @relation(fields: [role_id], references: [id])
  role_id       Int
}

model modules {
  id            Int                @id @default(autoincrement())
  module_name   String
  parent_id     Int?
  parent_module modules?           @relation("parent_module", fields: [parent_id], references: [id])
  child_modules modules[]          @relation("parent_module")
  path          String             @unique
  icon          String             @unique
  active_status Boolean
  display_order Int                @default(0)
  role_maps     role_modules_map[]
  group         module_group?       @relation(fields: [group_id], references: [id])
  group_id      Int?
}

model module_group {
  id            Int       @id @default(autoincrement())
  group_name    String
  icon          String    @unique
  active_status Boolean
  display_order Int       @default(0)
  modules       modules[]
}

model role_modules_map {
  id            Int     @id @default(autoincrement())
  module        modules @relation(fields: [module_id], references: [id])
  module_id     Int
  role          roles   @relation(fields: [role_id], references: [id])
  role_id       Int
  active_status Boolean @default(true)
}

model clients {
  id          Int        @id @default(autoincrement())
  login_id    Int?       @unique
  first_name  String
  last_name   String
  org_name    String?
  contact     String
  email       String?
  address     String?
  city        String?
  state       String?
  country     String?
  pincode     String?
  dob         String?
  gender      String?
  project_ids projects[]

  @@unique([first_name, last_name])
}

model projects {
  id                  Int       @id @default(autoincrement())
  name                String
  description         String
  start_date          DateTime?
  expected_start_date DateTime
  expected_end_date   DateTime
  completion_status   Int?
  end_date            DateTime?
  status              String    @default(value: "Pending")
  team_lead           Int?
  budget              Int
  actual_cost         Int
  issues              String?
  notes               String?
  documents           String[]
  created_date        DateTime
  last_updated_date   DateTime
  client              clients?  @relation(fields: [client_id], references: [id])
  client_id           Int
}

model employees {
  id          Int       @id @default(autoincrement())
  login_id    Int?
  first_name  String
  last_name   String
  email       String
  org_email   String
  contact     Int
  address     String
  city        String
  state       String
  country     String
  pincode     String
  dob         DateTime
  gender      String
  doj         DateTime
  dor         DateTime?
  designation String
  salary_id   Int
}
